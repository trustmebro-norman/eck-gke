{{/* Define config for es nodeset  */}}
{{- define "elasticsearch-cluster.nodeSetCommonConfig" -}}
{{- if .enableClusterShardAlloc  -}}
# cluster level shard allocation
# Refer: https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html
cluster.routing.allocation.awareness.attributes: zone
cluster.routing.allocation.awareness.force.zone.values: us-central1-a, us-central1-b, us-central1-c
{{- end -}}
{{- if .enableHttpTLS | default true -}}
# http TLS enabled. Es CA cert should be mounted to client trust store (Eg: Kibana)
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.key: /usr/share/elasticsearch/config/cert-manager-certs/tls.key
xpack.security.http.ssl.certificate: /usr/share/elasticsearch/config/cert-manager-certs/tls.crt 
{{- end -}}
{{- if .enableTransportTLS | default true  -}}
# transport TLS
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.key: /usr/share/elasticsearch/config/cert-manager-certs/tls.key
xpack.security.transport.ssl.certificate: /usr/share/elasticsearch/config/cert-manager-certs/tls.crt
{{- end -}}
{{- end -}}

{{/* Define helper function for volume claim template */}}
{{- define "elasticsearch-cluster.volumeClaimTemplate" -}}
- metadata:
    name: elasticsearch-data
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: {{ .storageClass }}
    resources:
      requests:
        storage: {{ .storage }}
{{- end -}}

{{/* Define helper function for transport config */}}
{{- define "elasticsearch-cluster.transport" -}}
{{- if .enableTLS -}}
tls:
    certificateAuthorities:
        configMapName: trust # Mount CA cert from configmap trust. Trustmanager will create trust configmap for each ns by default
    selfSignedCertificates:
        disabled: true  # Disables the self-signed certificates generated by ECK for the transport layer.
{{- end -}}
{{- end -}}

{{/* Define helper function for extraVolumes config */}}
{{- define "elasticsearch-cluster.extraVolumes" -}}
{{- if .enableTLS -}}
- name: transport-certs
  csi:
    driver: csi.cert-manager.io
    readOnly: true
    volumeAttributes:
        csi.cert-manager.io/issuer-name: ca-cluster-issuer 
        csi.cert-manager.io/issuer-kind: ClusterIssuer
        csi.cert-manager.io/dns-names: "${POD_NAME}.${POD_NAMESPACE}.svc.cluster.local"
{{- end -}}
{{- end -}}

{{/* Define helper function for extraVolumeMounts config */}}
{{- define "elasticsearch-cluster.extraVolumeMounts" -}}
{{- if .enableTLS -}}
- name: transport-certs
  mountPath: /usr/share/elasticsearch/config/cert-manager-certs
{{- end -}}
{{- end -}}

{{/* Define helper function for initContainers config */}}
{{- define "elasticsearch-cluster.initContainers" -}}
{{- if .enableInitContainers -}}
- name: sysctl
  securityContext:
    privileged: true
    runAsUser: 0
  command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
{{- end -}}
{{- end -}}

{{/* Define helper function for affinity config */}}
{{- define "elasticsearch-cluster.affinity" -}}
{{- if .enableAffinity -}}
nodeAffinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
      - matchExpressions:
        - key: topology.kubernetes.io/zone
          operator: In
          values:
          {{- range .zones }}
          - {{ . }}
          {{- end }} 
{{- end -}}
{{- end -}}

{{/* Define helper function for topologySpreadConstraints config */}}
{{- define "elasticsearch-cluster.topologySpreadConstraints" -}}
{{- if .enableTopologySpreadConstraints -}}
- maxSkew: 1
  topologyKey: topology.kubernetes.io/zone
  whenUnsatisfiable: ScheduleAnyway
  nodeAffinityPolicy: Honor
  nodeTaintsPolicy: Honor
  labelSelector:
    matchLabels:
      elasticsearch.k8s.elastic.co/cluster-name={{ .clusterName }}-cluster 
{{- end -}}
{{- end -}}



{{/* Define config for Kibana  */}}
{{- define "elasticsearch-cluster.kibanaConfig" -}}
{{- if .enableHttpTLS | default true -}}
elasticsearch.hosts: https://{{ .clusterName }}-es-http:9200
elasticsearch.ssl.certificateAuthorities: $KBN_PATH_CONF/cert-manager-certs/elasticsearch-ca.pem
elasticsearch.username: elastic
{{- end -}}
{{- if .enableIngressTLS | default true  -}}
server.ssl.enabled: true
server.ssl.certificate: $KBN_PATH_CONF/cert-manager-certs/kibana/tls.crt
server.ssl.key: $KBN_PATH_CONF/cert-manager-certs/kibana/tls.key
{{- end -}}
{{- end -}}

{{/* Define helper function for Kibana extraVolumes config */}}
{{- define "elasticsearch-cluster.kibanaExtraVolumes" -}}
{{- if .enableHttpTLS | default true -}}
- name: elasticsearch-ca-cert
  configMap:
    name: trust
{{- end -}}
{{- if .enableIngressTLS | default true -}}
- name: kibana-cert
  secret:
    secretName: kibana-cert
{{- end -}}
{{- end -}}

{{/* Define helper function for Kibana extraVolumeMounts config */}}
{{- define "elasticsearch-cluster.kibanaExtraVolumeMounts" -}}
{{- if .enableHttpTLS | default true -}}
- name: elasticsearch-ca-cert
  mountPath: $KBN_PATH_CONF/cert-manager-certs/elasticsearch-ca.pem
{{- end -}}
{{- if .enableIngressTLS | default true -}}
- name: kibana-cert
  subPath: tls.crt
  mountPath: $KBN_PATH_CONF/cert-manager-certs/kibana/tls.crt
- name: kibana-cert
  subPath: tls.key
  mountPath: $KBN_PATH_CONF/cert-manager-certs/kibana/tls.key  
{{- end -}}
{{- end -}}